/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package battleship_gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;

/**
 *
 * @author Brian
 */
public class JFrame_Battleship extends javax.swing.JFrame {
    private static final int a = 10; //size of board a x a
    private JButton[][] buttons_Player;
    private JButton[][] buttons_AI;
    private JLabel[] row_1;
    private JLabel[] row_2;
    private Background bg = new Background();
    int count=0;
    boolean ppre=true;
    Validate validation = new Validate();
    
    /**
     * Creates new form IntroMenu
     */
    
    public JFrame_Battleship() {
        initComponents();
        Playerprepare();
        colSet();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jIntroMenuPane = new javax.swing.JLayeredPane();
    startButton = new javax.swing.JButton();
    rulesButton = new javax.swing.JButton();
    battleshipLogo = new javax.swing.JLabel();
    playerNameText = new javax.swing.JTextField();
    Continue = new javax.swing.JButton();
    jRulesPane = new javax.swing.JLayeredPane();
    rulesTitle = new javax.swing.JLabel();
    closeButton = new javax.swing.JButton();
    rulesText = new javax.swing.JTextArea();
    jGamePlayPane = new javax.swing.JLayeredPane();
    Invalid_Intern_Frame = new javax.swing.JInternalFrame("Invalid Input");
    jButton1 = new javax.swing.JButton();
    Invalid_Label = new javax.swing.JLabel();
    rulesLabel = new javax.swing.JLabel();
    jTextField1 = new javax.swing.JTextField();
    fireButton = new javax.swing.JButton();
    playerNameLabel = new javax.swing.JLabel();
    jBoardPane_Player = new javax.swing.JLayeredPane();
    jBoardPane_AI = new javax.swing.JLayeredPane();
    AI_Label = new javax.swing.JLabel();
    col_2 = new javax.swing.JLabel();
    Tip = new javax.swing.JLabel();
    col_1 = new javax.swing.JLabel();
    WinLose = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jIntroMenuPane.setFont(new java.awt.Font("Trajan Pro", 1, 13)); // NOI18N
    jIntroMenuPane.setMaximumSize(new java.awt.Dimension(1024, 1000));
    jIntroMenuPane.setName(""); // NOI18N
    jIntroMenuPane.setPreferredSize(new java.awt.Dimension(1024, 1000));

    startButton.setFont(new java.awt.Font("Perpetua Titling MT", 1, 24)); // NOI18N
    startButton.setText("Start");
    startButton.setMaximumSize(new java.awt.Dimension(140, 60));
    startButton.setMinimumSize(new java.awt.Dimension(140, 60));
    startButton.setPreferredSize(new java.awt.Dimension(140, 60));
    startButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        startButtonMouseClicked(evt);
      }
    });

    rulesButton.setFont(new java.awt.Font("Perpetua Titling MT", 1, 24)); // NOI18N
    rulesButton.setText("Rules");
    rulesButton.setMaximumSize(new java.awt.Dimension(140, 60));
    rulesButton.setMinimumSize(new java.awt.Dimension(140, 60));
    rulesButton.setPreferredSize(new java.awt.Dimension(140, 60));
    rulesButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        rulesButtonMouseClicked(evt);
      }
    });

    battleshipLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/battleship_gui/battleship-movie-logo.png"))); // NOI18N

    playerNameText.setFont(new java.awt.Font("Perpetua Titling MT", 0, 24)); // NOI18N
    playerNameText.setText("Enter Player's Name");
    playerNameText.setToolTipText("");
    playerNameText.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        playerNameTextMouseClicked(evt);
      }
    });

    Continue.setFont(new java.awt.Font("Perpetua Titling MT", 1, 24)); // NOI18N
    Continue.setText("Continue");
    Continue.setMaximumSize(new java.awt.Dimension(140, 60));
    Continue.setMinimumSize(new java.awt.Dimension(140, 60));
    Continue.setPreferredSize(new java.awt.Dimension(140, 60));
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("Player.txt"), "utf-8"))) {
      Continue.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
          ContinueMouseClicked(evt);
        }
      }
    }catch(IOException e){
      Continue.setEnabled(false);
      e.printStackTrace();
    }

    javax.swing.GroupLayout jIntroMenuPaneLayout = new javax.swing.GroupLayout(jIntroMenuPane);
    jIntroMenuPane.setLayout(jIntroMenuPaneLayout);
    jIntroMenuPaneLayout.setHorizontalGroup(
      jIntroMenuPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jIntroMenuPaneLayout.createSequentialGroup()
        .addGroup(jIntroMenuPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jIntroMenuPaneLayout.createSequentialGroup()
            .addGap(272, 272, 272)
            .addComponent(battleshipLogo))
          .addGroup(jIntroMenuPaneLayout.createSequentialGroup()
            .addGap(377, 377, 377)
            .addComponent(playerNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jIntroMenuPaneLayout.createSequentialGroup()
            .addGap(420, 420, 420)
            .addGroup(jIntroMenuPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(rulesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
              .addComponent(Continue, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
              .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        .addContainerGap(328, Short.MAX_VALUE))
    );
    jIntroMenuPaneLayout.setVerticalGroup(
      jIntroMenuPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jIntroMenuPaneLayout.createSequentialGroup()
        .addGap(193, 193, 193)
        .addComponent(battleshipLogo)
        .addGap(76, 76, 76)
        .addComponent(playerNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(55, 55, 55)
        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(40, 40, 40)
        .addComponent(Continue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(40, 40, 40)
        .addComponent(rulesButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(80, Short.MAX_VALUE))
    );
    jIntroMenuPane.setLayer(startButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jIntroMenuPane.setLayer(rulesButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jIntroMenuPane.setLayer(battleshipLogo, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jIntroMenuPane.setLayer(playerNameText, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jIntroMenuPane.setLayer(Continue, javax.swing.JLayeredPane.DEFAULT_LAYER);

    jRulesPane.setVisible(false);
    jRulesPane.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 255), 1, true));
    jRulesPane.setMaximumSize(new java.awt.Dimension(1024, 1000));
    jRulesPane.setPreferredSize(new java.awt.Dimension(1024, 1000));

    rulesTitle.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
    rulesTitle.setText("Rules for BattleShip");

    closeButton.setText("close");
    closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        closeButtonMouseClicked(evt);
      }
    });
    closeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        closeButtonActionPerformed(evt);
      }
    });

    rulesText.setEditable(false);
    rulesText.setColumns(20);
    rulesText.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N
    rulesText.setRows(5);
    rulesText.setText("User chooses a spot on the grid to strike. \n\nIf the user guesses right, the board will show a marker for a \"hit\". \nIf the user guesses wrong it will display a \"miss\"");

    javax.swing.GroupLayout jRulesPaneLayout = new javax.swing.GroupLayout(jRulesPane);
    jRulesPane.setLayout(jRulesPaneLayout);
    jRulesPaneLayout.setHorizontalGroup(
      jRulesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jRulesPaneLayout.createSequentialGroup()
        .addGroup(jRulesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jRulesPaneLayout.createSequentialGroup()
            .addContainerGap(1011, Short.MAX_VALUE)
            .addComponent(closeButton))
          .addGroup(jRulesPaneLayout.createSequentialGroup()
            .addGap(260, 260, 260)
            .addComponent(rulesTitle)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
      .addGroup(jRulesPaneLayout.createSequentialGroup()
        .addGap(189, 189, 189)
        .addComponent(rulesText, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jRulesPaneLayout.setVerticalGroup(
      jRulesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jRulesPaneLayout.createSequentialGroup()
        .addGap(104, 104, 104)
        .addComponent(rulesTitle)
        .addGap(151, 151, 151)
        .addComponent(rulesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 334, Short.MAX_VALUE)
        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    jRulesPane.setLayer(rulesTitle, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jRulesPane.setLayer(closeButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jRulesPane.setLayer(rulesText, javax.swing.JLayeredPane.DEFAULT_LAYER);

    jGamePlayPane.setVisible(false);
    jGamePlayPane.setMaximumSize(new java.awt.Dimension(1024, 1000));
    jGamePlayPane.setName(""); // NOI18N
    jGamePlayPane.setPreferredSize(new java.awt.Dimension(1024, 1000));
    jGamePlayPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    Invalid_Intern_Frame.setVisible(true);

    jButton1.setText("Close");
    jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jButton1MouseClicked(evt);
      }
    });

    Invalid_Label.setText("Invalid Notice");

    javax.swing.GroupLayout Invalid_Intern_FrameLayout = new javax.swing.GroupLayout(Invalid_Intern_Frame.getContentPane());
    Invalid_Intern_Frame.getContentPane().setLayout(Invalid_Intern_FrameLayout);
    Invalid_Intern_FrameLayout.setHorizontalGroup(
      Invalid_Intern_FrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Invalid_Intern_FrameLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jButton1))
      .addComponent(Invalid_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    Invalid_Intern_FrameLayout.setVerticalGroup(
      Invalid_Intern_FrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Invalid_Intern_FrameLayout.createSequentialGroup()
        .addComponent(Invalid_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton1))
    );

    jGamePlayPane.add(Invalid_Intern_Frame, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 490, 210, 150));
    Invalid_Intern_Frame.setVisible(false);
    Invalid_Intern_Frame.setResizable(false);

    rulesLabel.setToolTipText("Rules");
    rulesLabel.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        rulesLabelMouseClicked(evt);
      }
    });
    jGamePlayPane.add(rulesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 10, 50, -1));

    jTextField1.setText("Input Format A1A5");
    jTextField1.setToolTipText("");
    jTextField1.setMinimumSize(new java.awt.Dimension(98, 20));
    jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jTextField1MouseClicked(evt);
      }
    });
    jGamePlayPane.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 638, 140, -1));

    fireButton.setText("Place");
    fireButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fireButtonActionPerformed(evt);
      }
    });
    jGamePlayPane.add(fireButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(243, 678, -1, -1));

    playerNameLabel.setFont(new java.awt.Font("Poor Richard", 0, 48)); // NOI18N
    playerNameLabel.setText("Player's Name");
    jGamePlayPane.add(playerNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 350, 40));

    jBoardPane_Player.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    jBoardPane_Player.setPreferredSize(new java.awt.Dimension(500, 500));

    javax.swing.GroupLayout jBoardPane_PlayerLayout = new javax.swing.GroupLayout(jBoardPane_Player);
    jBoardPane_Player.setLayout(jBoardPane_PlayerLayout);
    jBoardPane_PlayerLayout.setHorizontalGroup(
      jBoardPane_PlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 496, Short.MAX_VALUE)
    );
    jBoardPane_PlayerLayout.setVerticalGroup(
      jBoardPane_PlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 496, Short.MAX_VALUE)
    );

    ButtonTablePlayer();

    jGamePlayPane.add(jBoardPane_Player, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, -1));

    jBoardPane_AI.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    jBoardPane_AI.setPreferredSize(new java.awt.Dimension(500, 500));

    javax.swing.GroupLayout jBoardPane_AILayout = new javax.swing.GroupLayout(jBoardPane_AI);
    jBoardPane_AI.setLayout(jBoardPane_AILayout);
    jBoardPane_AILayout.setHorizontalGroup(
      jBoardPane_AILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 496, Short.MAX_VALUE)
    );
    jBoardPane_AILayout.setVerticalGroup(
      jBoardPane_AILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 496, Short.MAX_VALUE)
    );

    ButtonTableAI();
    AIprepare();

    jGamePlayPane.add(jBoardPane_AI, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 100, -1, -1));

    AI_Label.setFont(new java.awt.Font("Poor Richard", 0, 48)); // NOI18N
    AI_Label.setText("AI");
    jGamePlayPane.add(AI_Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, -1, -1));

    col_2.setText("         0              1              2              3              4              5              6             7              8              9");
    jGamePlayPane.add(col_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 70, 500, 30));

    Tip.setText("Please enter the coordinates to place "+bg.unit[count]+" ship\nformat is B-A5");
    jGamePlayPane.add(Tip, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 610, -1, -1));

    col_1.setText("         0              1              2              3              4              5              6             7              8              9");
    jGamePlayPane.add(col_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 500, 30));
    jGamePlayPane.add(WinLose, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 40, 240, 100));
    WinLose.setBackground(Color.green);
    WinLose.setVisible(false);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jIntroMenuPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1080, Short.MAX_VALUE)
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jRulesPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1080, Short.MAX_VALUE))
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jGamePlayPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1080, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jIntroMenuPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jRulesPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE))
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jGamePlayPane, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseClicked
        // TODO add your handling code here:
      jIntroMenuPane.setVisible(true);
      jRulesPane.setVisible(false);
    }//GEN-LAST:event_closeButtonMouseClicked

    private void rulesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rulesButtonMouseClicked
        // TODO add your handling code here:
      jIntroMenuPane.setVisible(false);
      jRulesPane.setVisible(true);
    }//GEN-LAST:event_rulesButtonMouseClicked

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_closeButtonActionPerformed

    private void rulesLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rulesLabelMouseClicked

      jGamePlayPane.setVisible(false);
      jRulesPane.setVisible(true);
    }//GEN-LAST:event_rulesLabelMouseClicked

    private void startButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startButtonMouseClicked
      if(playerNameText.getText().equals("Enter Player's Name"))
        playerNameLabel.setText("Player");
      else
        playerNameLabel.setText(playerNameText.getText());
      jIntroMenuPane.setVisible(false);
      jGamePlayPane.setVisible(true);
      reset();
    }//GEN-LAST:event_startButtonMouseClicked

  private void fireButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireButtonActionPerformed
    boolean valid;
    String temp = jTextField1.getText();
    System.out.println(temp);
    //place ship
    if(ppre){
      if(validation.place(temp)){
        valid=bg.place(temp, count);
        if(valid && validation.place(temp)){   //if true = valid input update gui table
          count++;
          if(count<5){
            Playerprepare();  //update prompt label
          }//placing ship ends
          else{
            PlayerSave();
            AISave();
            NameSave();
            //update label text
            Tip.setText("Ready to fire!");
            //update button text
            fireButton.setText("Fire");
            //set ai buttons enable
            enableAI(true);
            ppre=false;
          }
          UpdateTable();
        }
        else{
          //add new label
          System.out.println("Invalid input");
          Invalid_Intern_Frame.setVisible(true);
          Invalid_Label.setText("Invalid_Input: Overlap/Unit");
        }
      }
      else{
        //add new label
        System.out.println("Invalid input");
        Invalid_Intern_Frame.setVisible(true);
        Invalid_Label.setText("Invalid_Input: place format A1A5");
      }
        
    }
    //fire
    else{
      //validation needed length=2
      if(validation.fire(temp)){
        if(bg.pFireCheck(temp)){
          //update table (only that index) AND COLOR
          buttons_AI[bg.y1][bg.x1].setText(String.valueOf(bg.real[bg.y1][bg.x1]));
          if(bg.real[bg.y1][bg.x1]=='X')
            buttons_AI[bg.y1][bg.x1].setBackground(Color.red);
          else
            buttons_AI[bg.y1][bg.x1].setBackground(Color.yellow);
          //disable fire button
          fireButton.setEnabled(false);
          if(bg.chkWin(bg.real)){
            //update Label
            WinLose.setText(playerNameLabel.getText()+" wins");
            WinLose.setVisible(true);
            System.out.println("Player wins");
            reset();
          }
          //player wins = false
          //game continue
          else{
            //ai buttons disable
            enableAI(false);
            /**ai fire turn begins
             * update player table
             * ai fire turn ends
            */
            AIFire();
            //ai wins
            if(bg.chkWin(bg.player)){
              //update label
              WinLose.setText(playerNameLabel.getText()+" loses");
              WinLose.setVisible(true);
              System.out.println("Player loses");
              reset();
            }
            else{
              //set fire button, ai buttons enable
              enableAI(true);
              fireButton.setEnabled(true);
              //save
              AISave();
              PlayerSave();
            }
          }//ai wins = false (game continue
        }
        else{
          //add one new label
          System.out.println("Fire Invalid");
          Invalid_Intern_Frame.setVisible(true);
          Invalid_Label.setText("Invalid Input: Overlap");
        }
      }
      else{
        //add one new label
        System.out.println("Fire Invalid");
        Invalid_Intern_Frame.setVisible(true);
        Invalid_Label.setText("Invalid Input: Fire Format A1");
      }
    }
  }//GEN-LAST:event_fireButtonActionPerformed

  private void playerNameTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerNameTextMouseClicked
    // TODO add your handling code here:
    playerNameText.selectAll();
  }//GEN-LAST:event_playerNameTextMouseClicked

  private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
    // TODO add your handling code here:
    jTextField1.selectAll();
  }//GEN-LAST:event_jTextField1MouseClicked

  private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
    // TODO add your handling code here:
    Invalid_Intern_Frame.setVisible(false);
  }//GEN-LAST:event_jButton1MouseClicked
  private void ContinueMouseClicked(java.awt.event.MouseEvent evt) {                                      
    // TODO add your handling code here:
    AILoad();
    PlayerLoad();
    NameLoad();
    jIntroMenuPane.setVisible(false);
    jGamePlayPane.setVisible(true);
    //skip place ship part
    Tip.setText("Ready to fire!");
    //update button text
    fireButton.setText("Fire");
    //set ai buttons enable
    enableAI(true);
    ppre=false;
  } 
  
    //creates the button table for the player
    public void ButtonTablePlayer() {
      //adds grid to place 2D array
      jBoardPane_Player.setLayout(new GridLayout(a,a));
      //declare size of button 2D array
      buttons_Player = new JButton[a][a];
      for(int i=0;i<a;i++){
        for(int j=0;j<a;j++){
          //create new JButton
          buttons_Player[i][j] = new JButton();
//          buttons_Player[i][j].setText(Integer.toString(i)+" "+Integer.toString(j));
          buttons_Player[i][j].setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
          buttons_Player[i][j].setBackground(Color.white);
          buttons_Player[i][j].setEnabled(false);
          //addes buttons to the layered pane
          jBoardPane_Player.add(buttons_Player[i][j]);
        }
      }
    }
     
    //creates the button table for the AI
    public void ButtonTableAI() {
      ActionListener aiclk = new ButtonListenerAI();
      jBoardPane_AI.setLayout(new GridLayout(a,a));
      //declare size of button array
      buttons_AI = new JButton[a][a];
      for(int i=0;i<a;i++){
        for(int j=0;j<a;j++){
          //create new object
          buttons_AI[i][j] = new JButton();
//          buttons_AI[i][j].setText(Integer.toString(i)+" "+Integer.toString(j));
          buttons_AI[i][j].setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
          buttons_AI[i][j].addActionListener(aiclk);
          buttons_AI[i][j].setBackground(Color.white);
          buttons_AI[i][j].setEnabled(false); //disable before prepare
          //adds buttons to the layered pane
          jBoardPane_AI.add(buttons_AI[i][j]);
        }
      }
    }
    

    //PLAYER FIRE 
    //create an action listener class for AI
    public class ButtonListenerAI implements ActionListener {  
      @Override
      public void actionPerformed(ActionEvent e){
        for (int i = 0; i < a; i++){
          for (int j = 0; j < a; j++){
            if(e.getSource()==buttons_AI[i][j]){ //gameButtons[i][j] was clicked
              //Your code here
              System.out.println("AI"+i+" "+j);
              if(bg.pFireCheck(i, j)){
                //update table (only that index) AND COLOR
                
                buttons_AI[bg.y1][bg.x1].setText(String.valueOf(bg.real[bg.y1][bg.x1]));
                if(bg.real[bg.y1][bg.x1]=='X')
                  buttons_AI[bg.y1][bg.x1].setBackground(Color.red);
                else
                  buttons_AI[bg.y1][bg.x1].setBackground(Color.yellow);
                //set fire button, ai buttons disable
                fireButton.setEnabled(false);
                enableAI(false);
                if(bg.chkWin(bg.real)){
                  //update Label
                  WinLose.setText(playerNameLabel.getText()+" wins");
                  WinLose.setVisible(true);
                  System.out.println("Player wins");
                  reset();
                }
                else{
                  /**ai fire turn begins
                  * update player table
                  * ai fire turn ends
                  */
                  AIFire();
                  if(bg.chkWin(bg.player)){//ai wins
                    //update Label
                    WinLose.setText(playerNameLabel.getText()+" loses");
                    WinLose.setVisible(true);
                    System.out.println("Player loses");
                    reset();
                  }
                  else{
                    //set fire button, ai buttons enable
                    enableAI(true);
                    fireButton.setEnabled(true);
                    //save
                    PlayerSave();
                    AISave();
                  }
                }
              }
            }
          }
        }
      }
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel AI_Label;
  private javax.swing.JButton Continue;
  private javax.swing.JInternalFrame Invalid_Intern_Frame;
  private javax.swing.JLabel Invalid_Label;
  private javax.swing.JLabel Tip;
  private javax.swing.JLabel WinLose;
  private javax.swing.JLabel battleshipLogo;
  private javax.swing.JButton closeButton;
  private javax.swing.JLabel col_1;
  private javax.swing.JLabel col_2;
  private javax.swing.JButton fireButton;
  private javax.swing.JLayeredPane jBoardPane_AI;
  private javax.swing.JLayeredPane jBoardPane_Player;
  private javax.swing.JButton jButton1;
  private javax.swing.JLayeredPane jGamePlayPane;
  private javax.swing.JLayeredPane jIntroMenuPane;
  private javax.swing.JLayeredPane jRulesPane;
  private javax.swing.JTextField jTextField1;
  private javax.swing.JLabel playerNameLabel;
  private javax.swing.JTextField playerNameText;
  private javax.swing.JButton rulesButton;
  private javax.swing.JLabel rulesLabel;
  private javax.swing.JTextArea rulesText;
  private javax.swing.JLabel rulesTitle;
  private javax.swing.JButton startButton;
  // End of variables declaration//GEN-END:variables

  //[a-jA-J]{1}[0-9]{1}
  //[a-jA-J]{1}\-{1}[a-jA-J]{1}[0-9]{1}
  //a1-a5
  private void AIprepare(){
    bg.ai();
      for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
          if(bg.fake[i][j]!=' '){
            buttons_AI[i][j].setText(String.valueOf(bg.fake[i][j]));
            buttons_AI[i][j].setBackground(Color.gray);
          }
        }
      }
  }
  private void Playerprepare(){
    Tip.setText("Enter the coordinates to place "+bg.unit[count]+"-unit ship");
  }
  private void UpdateTable(){
    for(int i=0;i<bg.num;i++){
      for(int j=0;j<bg.num;j++){
        if(bg.player[i][j]!=' '){
          buttons_Player[i][j].setBackground(Color.gray);
          buttons_Player[i][j].setText(String.valueOf(bg.player[i][j]));
        }
      }
    }
  }
  
  private void enableAI(boolean bool){
    for(int i=0;i<a;i++){
      for(int j=0;j<a;j++){
        buttons_AI[i][j].setEnabled(bool);
      }
    }
  }
  private void AIFire(){
    bg.aiFirebg();
    buttons_Player[bg.aiProp.y][bg.aiProp.x].setText(String.valueOf(bg.player[bg.aiProp.y][bg.aiProp.x]));
    if(bg.player[bg.aiProp.y][bg.aiProp.x]=='X'){
      buttons_Player[bg.aiProp.y][bg.aiProp.x].setBackground(Color.red);
      System.out.println("hit"+bg.aiProp.y+" "+bg.aiProp.x);
    }
    else{
      buttons_Player[bg.aiProp.y][bg.aiProp.x].setBackground(Color.yellow);
      System.out.println("miss"+bg.aiProp.y+" "+bg.aiProp.x);
    }
    PlayerSave();
    AISave();
  }
  private void colSet(){
    row_1 = new JLabel[10];
    row_2 = new JLabel[10];
    for(int i=0;i<10;i++){
      row_1[i] = new JLabel(String.valueOf((char)(i+65)));
      row_2[i] = new JLabel(String.valueOf((char)(i+65)));
      jGamePlayPane.add(row_1[i], new org.netbeans.lib.awtextra.AbsoluteConstraints(20, (120+i*50), -1, -1));
      jGamePlayPane.add(row_2[i], new org.netbeans.lib.awtextra.AbsoluteConstraints(555, (120+i*50), -1, -1));
    }
  }
  //save ai table
  private void AISave(){
    try(BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("AI.txt"), "UTF-8"))){
      for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
          writer.write(String.valueOf(bg.real[i][j]));
        }
        writer.write("\n");
      }
      writer.close();
    }catch (IOException ex){
      //handle me
      ex.printStackTrace();
    }
  }
  //load ai
  private void AILoad(){
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("AI.txt"), "utf-8"))) {
      String temp;
      int counter=0;
      while((temp=reader.readLine())!=null){
        for(int j=0;j<10;j++){
         bg. real[counter][j]=temp.charAt(j);
         if(bg.real[counter][j]=='X'){
            buttons_AI[counter][j].setBackground(Color.red);
            buttons_AI[counter][j].setText(String.valueOf(bg.real[counter][j]));
          }
          else if(bg.real[counter][j]=='O'){
            buttons_AI[counter][j].setBackground(Color.yellow);
            buttons_AI[counter][j].setText(String.valueOf(bg.real[counter][j]));
          }
        }
        counter++;
        System.out.println(temp);
        System.out.println(temp.length());
      }
      reader.close();
    } catch (IOException ex){
      ex.printStackTrace();
    }
  }
  //save player
  private void PlayerSave(){
    try(BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("Player.txt"), "UTF-8"))){
      for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
          writer.write(String.valueOf(bg.player[i][j]));
        }
        writer.write("\n");
      }
      writer.close();
    }catch (IOException ex){
      //handle me
      ex.printStackTrace();
    }
  }
  //load player
  private void PlayerLoad(){
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("Player.txt"), "utf-8"))) {
      String temp;
      int counter=0;
      while((temp=reader.readLine())!=null){
        for(int j=0;j<10;j++){
          bg.player[counter][j]=temp.charAt(j);
          if(bg.player[counter][j]=='X'){
            buttons_Player[counter][j].setBackground(Color.red);
            buttons_Player[counter][j].setText(String.valueOf(bg.player[counter][j]));
          }
          else if(bg.player[counter][j]=='O'){
            buttons_Player[counter][j].setBackground(Color.yellow);
            buttons_Player[counter][j].setText(String.valueOf(bg.player[counter][j]));
          }
          else if(bg.player[counter][j]!=' '){
            buttons_Player[counter][j].setBackground(Color.gray);
            buttons_Player[counter][j].setText(String.valueOf(bg.player[counter][j]));
          }
        }
        counter++;
        System.out.println(temp);
        System.out.println(temp.length());
      }
      reader.close();
    } catch (IOException ex){
      ex.printStackTrace();
    }
  }
  private void NameSave(){
    try(BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("Name.txt"), "UTF-8"))){
      writer.write(playerNameLabel.getText());
      writer.close();
    }catch (IOException ex){
      //handle me
      ex.printStackTrace();
    }
  }
  //load name to player name label
  private void NameLoad(){
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("Name.txt"), "utf-8"))) {
      String temp;
      temp=reader.readLine();
      playerNameLabel.setText(temp);
      System.out.println(temp);
      System.out.println(temp.length());
    reader.close();
    } catch (IOException ex){
      ex.printStackTrace();
    }
  }
  private void reset(){
    File[] file = new File[3];
    String[] FileName = {"Player.txt", "AI.txt", "Name.txt"};
    for(int i=0;i<3;i++){
      file[i] = new File(FileName[i]);
      file[i].delete();
    }
  }
}
