/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package battleship_gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;

/**
 *
 * @author Brian
 */
public class JFrame_Battleship extends javax.swing.JFrame {
    private static final int a = 10; //size of board a x a
    private JButton[][] buttons_Player;
    private JButton[][] buttons_AI;
    private JLabel[] row_1;
    private JLabel[] row_2;
    private Background bg = new Background();
    int count=0;
    boolean ppre=true;
    Validate validation = new Validate();
    TextInputs menu;
    Color greyish = new Color(204,204,204);
    Font font0 = new Font("Rockwell", Font.PLAIN, 20);

    
    /**
     * Creates new form IntroMenu
     */
    
    public JFrame_Battleship() {
        initComponents();
        Playerprepare();
        colSet();
        setLocationRelativeTo(null);  
        Tip.setForeground(greyish);
        Tip.setFont(font0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jIntroMenuPane = new javax.swing.JLayeredPane();
        startButton = new javax.swing.JButton();
        rulesButton = new javax.swing.JButton();
        battleshipLogo = new javax.swing.JLabel();
        backgroundImageLabel = new javax.swing.JLabel();
        jRulesPane = new javax.swing.JLayeredPane();
        rulesTitle = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        rulesText = new javax.swing.JTextArea();
        backgroundImageLabel1 = new javax.swing.JLabel();
        jGamePlayPane = new javax.swing.JLayeredPane();
        Invalid_Intern_Frame = new javax.swing.JInternalFrame("Invalid Input");
        jButton1 = new javax.swing.JButton();
        Invalid_Label = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        fireButton = new javax.swing.JButton();
        playerNameLabel = new javax.swing.JLabel();
        jBoardPane_Player = new javax.swing.JLayeredPane();
        jBoardPane_AI = new javax.swing.JLayeredPane();
        AI_Label = new javax.swing.JLabel();
        col_2 = new javax.swing.JLabel();
        Tip = new javax.swing.JLabel();
        col_1 = new javax.swing.JLabel();
        WinLose = new javax.swing.JLabel();
        backgroundImageLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jIntroMenuPane.setFont(new java.awt.Font("Trajan Pro", 1, 13)); // NOI18N
        jIntroMenuPane.setMaximumSize(new java.awt.Dimension(1080, 800));
        jIntroMenuPane.setName(""); // NOI18N
        jIntroMenuPane.setPreferredSize(new java.awt.Dimension(1080, 800));
        jIntroMenuPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        startButton.setBackground(new java.awt.Color(102, 102, 102));
        startButton.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        startButton.setForeground(new java.awt.Color(204, 204, 204));
        startButton.setText("Start");
        startButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, java.awt.Color.lightGray, java.awt.Color.white));
        startButton.setMaximumSize(new java.awt.Dimension(140, 60));
        startButton.setMinimumSize(new java.awt.Dimension(140, 60));
        startButton.setPreferredSize(new java.awt.Dimension(140, 60));
        startButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startButtonMouseClicked(evt);
            }
        });
        jIntroMenuPane.add(startButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 350, -1, -1));

        rulesButton.setBackground(new java.awt.Color(102, 102, 102));
        rulesButton.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        rulesButton.setForeground(new java.awt.Color(204, 204, 204));
        rulesButton.setText("Rules");
        rulesButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, java.awt.Color.lightGray, java.awt.Color.white));
        rulesButton.setMaximumSize(new java.awt.Dimension(140, 60));
        rulesButton.setMinimumSize(new java.awt.Dimension(140, 60));
        rulesButton.setPreferredSize(new java.awt.Dimension(140, 60));
        rulesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rulesButtonMouseClicked(evt);
            }
        });
        jIntroMenuPane.add(rulesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 460, -1, -1));

        battleshipLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/battleship_gui/battleship-movie-logo.png"))); // NOI18N
        jIntroMenuPane.add(battleshipLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, -1, -1));

        backgroundImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/battleship_gui/BSBackground.jpg"))); // NOI18N
        backgroundImageLabel.setAlignmentY(0.0F);
        backgroundImageLabel.setOpaque(true);
        backgroundImageLabel.setVerifyInputWhenFocusTarget(false);
        jIntroMenuPane.add(backgroundImageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jRulesPane.setVisible(false);
        jRulesPane.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 255), 1, true));
        jRulesPane.setMaximumSize(new java.awt.Dimension(1024, 1000));
        jRulesPane.setPreferredSize(new java.awt.Dimension(1080, 800));
        jRulesPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rulesTitle.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 48)); // NOI18N
        rulesTitle.setForeground(new java.awt.Color(204, 204, 204));
        rulesTitle.setText("Rules for BattleShip");
        jRulesPane.add(rulesTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 200, -1, -1));

        closeButton.setText("close");
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
        });
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        jRulesPane.add(closeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 750, -1, -1));

        rulesText.setEditable(false);
        rulesText.setBackground(new java.awt.Color(102, 102, 102));
        rulesText.setColumns(20);
        rulesText.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N
        rulesText.setForeground(new java.awt.Color(204, 204, 204));
        rulesText.setRows(5);
        rulesText.setText("User chooses a spot on the grid to strike in the text field.\n\nIf the user guesses right, the area will turn red to mark as a\"hit\". \nIf the user guesses wrong, the area will turn yellow as a\"miss\".");
        rulesText.setDisabledTextColor(new java.awt.Color(153, 153, 153));
        jRulesPane.add(rulesText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 350, 780, -1));

        backgroundImageLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/battleship_gui/BSBackground.jpg"))); // NOI18N
        jRulesPane.add(backgroundImageLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jGamePlayPane.setVisible(false);
        jGamePlayPane.setMaximumSize(new java.awt.Dimension(1024, 1000));
        jGamePlayPane.setName(""); // NOI18N
        jGamePlayPane.setPreferredSize(new java.awt.Dimension(1080, 800));
        jGamePlayPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Invalid_Intern_Frame.setVisible(true);

        jButton1.setText("Close");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        Invalid_Label.setText("Invalid Notice");

        javax.swing.GroupLayout Invalid_Intern_FrameLayout = new javax.swing.GroupLayout(Invalid_Intern_Frame.getContentPane());
        Invalid_Intern_Frame.getContentPane().setLayout(Invalid_Intern_FrameLayout);
        Invalid_Intern_FrameLayout.setHorizontalGroup(
            Invalid_Intern_FrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Invalid_Intern_FrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1))
            .addComponent(Invalid_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        Invalid_Intern_FrameLayout.setVerticalGroup(
            Invalid_Intern_FrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Invalid_Intern_FrameLayout.createSequentialGroup()
                .addComponent(Invalid_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );

        jGamePlayPane.add(Invalid_Intern_Frame, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 490, 210, 150));
        Invalid_Intern_Frame.setVisible(false);
        Invalid_Intern_Frame.setResizable(false);

        jTextField1.setText("Input Format A1A5");
        jTextField1.setToolTipText("");
        jTextField1.setMinimumSize(new java.awt.Dimension(98, 20));
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });
        jGamePlayPane.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 638, 140, -1));

        fireButton.setBackground(new java.awt.Color(102, 102, 102));
        fireButton.setForeground(new java.awt.Color(204, 204, 204));
        fireButton.setText("Place");
        fireButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, java.awt.Color.lightGray, java.awt.Color.white));
        fireButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireButtonActionPerformed(evt);
            }
        });
        jGamePlayPane.add(fireButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 680, 50, 30));

        playerNameLabel.setFont(new java.awt.Font("Rockwell Condensed", 1, 48)); // NOI18N
        playerNameLabel.setForeground(new java.awt.Color(204, 204, 204));
        playerNameLabel.setText("Player's Name");
        jGamePlayPane.add(playerNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 350, 40));

        jBoardPane_Player.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBoardPane_Player.setPreferredSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout jBoardPane_PlayerLayout = new javax.swing.GroupLayout(jBoardPane_Player);
        jBoardPane_Player.setLayout(jBoardPane_PlayerLayout);
        jBoardPane_PlayerLayout.setHorizontalGroup(
            jBoardPane_PlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );
        jBoardPane_PlayerLayout.setVerticalGroup(
            jBoardPane_PlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );

        ButtonTablePlayer();

        jGamePlayPane.add(jBoardPane_Player, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, -1));

        jBoardPane_AI.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBoardPane_AI.setPreferredSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout jBoardPane_AILayout = new javax.swing.GroupLayout(jBoardPane_AI);
        jBoardPane_AI.setLayout(jBoardPane_AILayout);
        jBoardPane_AILayout.setHorizontalGroup(
            jBoardPane_AILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );
        jBoardPane_AILayout.setVerticalGroup(
            jBoardPane_AILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );

        ButtonTableAI();
        AIprepare();

        jGamePlayPane.add(jBoardPane_AI, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 100, -1, -1));

        AI_Label.setFont(new java.awt.Font("Rockwell Condensed", 1, 48)); // NOI18N
        AI_Label.setForeground(new java.awt.Color(204, 204, 204));
        AI_Label.setText("AI");
        jGamePlayPane.add(AI_Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, -1, -1));

        col_2.setForeground(new java.awt.Color(204, 204, 204));
        col_2.setText("         0              1              2              3              4              5              6             7              8              9");
        jGamePlayPane.add(col_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 70, 500, 30));

        Tip.setText("Please enter the coordinates to place "+bg.unit[count]+" ship\nformat is B-A5");
        Tip.setForeground(new java.awt.Color(204, 204, 204));
        jGamePlayPane.add(Tip, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 610, -1, -1));

        col_1.setForeground(new java.awt.Color(204, 204, 204));
        col_1.setText("         0              1              2              3              4              5              6             7              8              9");
        jGamePlayPane.add(col_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 510, 30));

        WinLose.setFont(new java.awt.Font("Rockwell Extra Bold", 0, 24)); // NOI18N
        WinLose.setForeground(new java.awt.Color(204, 204, 204));
        jGamePlayPane.add(WinLose, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 40, 240, 100));
        WinLose.setBackground(Color.green);
        WinLose.setVisible(false);

        backgroundImageLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/battleship_gui/BSBackground.jpg"))); // NOI18N
        jGamePlayPane.add(backgroundImageLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jIntroMenuPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jRulesPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jGamePlayPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jIntroMenuPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jRulesPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jGamePlayPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseClicked
        // TODO add your handling code here:
      jIntroMenuPane.setVisible(true);
      jRulesPane.setVisible(false);
    }//GEN-LAST:event_closeButtonMouseClicked

    private void rulesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rulesButtonMouseClicked
        // TODO add your handling code here:
      jIntroMenuPane.setVisible(false);
      jRulesPane.setVisible(true);
    }//GEN-LAST:event_rulesButtonMouseClicked

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_closeButtonActionPerformed

    private void startButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startButtonMouseClicked
      
      menu = new TextInputs();
      this.setVisible(false);
      menu.setBattleshipFrame(this);
      jIntroMenuPane.setVisible(false);
      jGamePlayPane.setVisible(true);
      
    }//GEN-LAST:event_startButtonMouseClicked

  private void fireButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireButtonActionPerformed
    boolean valid;
    String temp = jTextField1.getText();
    System.out.println(temp);
    //place ship
    if(ppre){
      if(validation.place(temp)){
        valid=bg.place(temp, count);
        if(valid && validation.place(temp)){   //if true = valid input update gui table
          count++;
          if(count<5){
            Playerprepare();  //update prompt label
          }//placing ship ends
          else{
            PlayerSave();
            AISave();
            NameSave();
            //update label text
            Tip.setText("Ready to fire!");
            //update button text
            fireButton.setText("Fire");
            //set ai buttons enable
            enableAI(true);
            ppre=false;
          }
          UpdateTable();
        }
        else{
          //add new label
          System.out.println("Invalid input");
          Invalid_Intern_Frame.setVisible(true);
          Invalid_Label.setText("Invalid_Input: Overlap/Unit");
        }
      }
      else{
        //add new label
        System.out.println("Invalid input");
        Invalid_Intern_Frame.setVisible(true);
        Invalid_Label.setText("Invalid_Input: place format A1A5");
      }
        
    }
    //fire
    else{
      //validation needed length=2
      if(validation.fire(temp)){
        if(bg.pFireCheck(temp)){
          //update table (only that index) AND COLOR
          buttons_AI[bg.y1][bg.x1].setText(String.valueOf(bg.real[bg.y1][bg.x1]));
          if(bg.real[bg.y1][bg.x1]=='X')
            buttons_AI[bg.y1][bg.x1].setBackground(Color.red);
          else
            buttons_AI[bg.y1][bg.x1].setBackground(Color.yellow);
          //disable fire button
          fireButton.setEnabled(false);
          if(bg.chkWin(bg.real)){
            //update Label
            WinLose.setText(playerNameLabel.getText()+" wins");
            WinLose.setVisible(true);
            System.out.println("Player wins");
            reset();
          }
          //player wins = false
          //game continue
          else{
            //ai buttons disable
            enableAI(false);
            /**ai fire turn begins
             * update player table
             * ai fire turn ends
            */
            AIFire();
            //ai wins
            if(bg.chkWin(bg.player)){
              //update label
              WinLose.setText(playerNameLabel.getText()+" loses");
              WinLose.setVisible(true);
              System.out.println("Player loses");
              reset();
            }
            else{
              //set fire button, ai buttons enable
              enableAI(true);
              fireButton.setEnabled(true);
              //save
              AISave();
              PlayerSave();
            }
          }//ai wins = false (game continue
        }
        else{
          //add one new label
          System.out.println("Fire Invalid");
          Invalid_Intern_Frame.setVisible(true);
          Invalid_Label.setText("Invalid Input: Overlap");
        }
      }
      else{
        //add one new label
        System.out.println("Fire Invalid");
        Invalid_Intern_Frame.setVisible(true);
        Invalid_Label.setText("Invalid Input: Fire Format A1");
      }
    }
  }//GEN-LAST:event_fireButtonActionPerformed

  private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
    // TODO add your handling code here:
    jTextField1.selectAll();
  }//GEN-LAST:event_jTextField1MouseClicked

  private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
    // TODO add your handling code here:
    Invalid_Intern_Frame.setVisible(false);
  }//GEN-LAST:event_jButton1MouseClicked

  
    //creates the button table for the player
    public void ButtonTablePlayer() {
      //adds grid to place 2D array
      jBoardPane_Player.setLayout(new GridLayout(a,a));
      //declare size of button 2D array
      buttons_Player = new JButton[a][a];
      for(int i=0;i<a;i++){
        for(int j=0;j<a;j++){
          //create new JButton
          buttons_Player[i][j] = new JButton();
//          buttons_Player[i][j].setText(Integer.toString(i)+" "+Integer.toString(j));
          buttons_Player[i][j].setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
          buttons_Player[i][j].setBackground(Color.white);
          buttons_Player[i][j].setEnabled(false);
          //addes buttons to the layered pane
          jBoardPane_Player.add(buttons_Player[i][j]);
        }
      }
    }
     
    //creates the button table for the AI
    public void ButtonTableAI() {
      ActionListener aiclk = new ButtonListenerAI();
      jBoardPane_AI.setLayout(new GridLayout(a,a));
      //declare size of button array
      buttons_AI = new JButton[a][a];
      for(int i=0;i<a;i++){
        for(int j=0;j<a;j++){
          //create new object
          buttons_AI[i][j] = new JButton();
//          buttons_AI[i][j].setText(Integer.toString(i)+" "+Integer.toString(j));
          buttons_AI[i][j].setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
          buttons_AI[i][j].addActionListener(aiclk);
          buttons_AI[i][j].setBackground(Color.white);
          buttons_AI[i][j].setEnabled(false); //disable before prepare
          //adds buttons to the layered pane
          jBoardPane_AI.add(buttons_AI[i][j]);
        }
      }
    }
    

    //PLAYER FIRE 
    //create an action listener class for AI
    public class ButtonListenerAI implements ActionListener {  
      @Override
      public void actionPerformed(ActionEvent e){
        for (int i = 0; i < a; i++){
          for (int j = 0; j < a; j++){
            if(e.getSource()==buttons_AI[i][j]){ //gameButtons[i][j] was clicked
              //Your code here
              System.out.println("AI"+i+" "+j);
              if(bg.pFireCheck(i, j)){
                //update table (only that index) AND COLOR
                
                buttons_AI[bg.y1][bg.x1].setText(String.valueOf(bg.real[bg.y1][bg.x1]));
                if(bg.real[bg.y1][bg.x1]=='X')
                  buttons_AI[bg.y1][bg.x1].setBackground(Color.red);
                else
                  buttons_AI[bg.y1][bg.x1].setBackground(Color.yellow);
                //set fire button, ai buttons disable
                fireButton.setEnabled(false);
                enableAI(false);
                if(bg.chkWin(bg.real)){
                  //update Label
                  WinLose.setText(playerNameLabel.getText()+" wins");
                  WinLose.setVisible(true);
                  System.out.println("Player wins");
                  reset();
                }
                else{
                  /**ai fire turn begins
                  * update player table
                  * ai fire turn ends
                  */
                  AIFire();
                  if(bg.chkWin(bg.player)){//ai wins
                    //update Label
                    WinLose.setText(playerNameLabel.getText()+" loses");
                    WinLose.setVisible(true);
                    System.out.println("Player loses");
                    reset();
                  }
                  else{
                    //set fire button, ai buttons enable
                    enableAI(true);
                    fireButton.setEnabled(true);
                    //save
                    PlayerSave();
                    AISave();
                  }
                }
              }
            }
          }
        }
      }
    }
    
    public void setPlayersName(String username){
        playerNameLabel.setText(username);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AI_Label;
    private javax.swing.JInternalFrame Invalid_Intern_Frame;
    private javax.swing.JLabel Invalid_Label;
    private javax.swing.JLabel Tip;
    private javax.swing.JLabel WinLose;
    private javax.swing.JLabel backgroundImageLabel;
    private javax.swing.JLabel backgroundImageLabel1;
    private javax.swing.JLabel backgroundImageLabel2;
    private javax.swing.JLabel battleshipLogo;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel col_1;
    private javax.swing.JLabel col_2;
    private javax.swing.JButton fireButton;
    private javax.swing.JLayeredPane jBoardPane_AI;
    private javax.swing.JLayeredPane jBoardPane_Player;
    private javax.swing.JButton jButton1;
    private javax.swing.JLayeredPane jGamePlayPane;
    private javax.swing.JLayeredPane jIntroMenuPane;
    private javax.swing.JLayeredPane jRulesPane;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel playerNameLabel;
    private javax.swing.JButton rulesButton;
    private javax.swing.JTextArea rulesText;
    private javax.swing.JLabel rulesTitle;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables

  //[a-jA-J]{1}[0-9]{1}
  //[a-jA-J]{1}\-{1}[a-jA-J]{1}[0-9]{1}
  //a1-a5
  private void AIprepare(){
    bg.ai();
      for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
          if(bg.fake[i][j]!=' '){
            buttons_AI[i][j].setText(String.valueOf(bg.fake[i][j]));
            buttons_AI[i][j].setBackground(Color.gray);
          }
        }
      }
  }
  private void Playerprepare(){
     
    Tip.setText("Enter the coordinates to place "+bg.unit[count]+"-unit ship");
  }
  private void UpdateTable(){
    for(int i=0;i<bg.num;i++){
      for(int j=0;j<bg.num;j++){
        if(bg.player[i][j]!=' '){
          buttons_Player[i][j].setBackground(Color.gray);
          buttons_Player[i][j].setText(String.valueOf(bg.player[i][j]));
        }
      }
    }
  }
  
  private void enableAI(boolean bool){
    for(int i=0;i<a;i++){
      for(int j=0;j<a;j++){
        buttons_AI[i][j].setEnabled(bool);
      }
    }
  }
  private void AIFire(){
    bg.aiFirebg();
    buttons_Player[bg.aiProp.y][bg.aiProp.x].setText(String.valueOf(bg.player[bg.aiProp.y][bg.aiProp.x]));
    if(bg.player[bg.aiProp.y][bg.aiProp.x]=='X'){
      buttons_Player[bg.aiProp.y][bg.aiProp.x].setBackground(Color.red);
      System.out.println("hit"+bg.aiProp.y+" "+bg.aiProp.x);
    }
    else{
      buttons_Player[bg.aiProp.y][bg.aiProp.x].setBackground(Color.yellow);
      System.out.println("miss"+bg.aiProp.y+" "+bg.aiProp.x);
    }
    PlayerSave();
    AISave();
  }
  private void colSet(){
    row_1 = new JLabel[10];
    row_2 = new JLabel[10];
    for(int i=0;i<10;i++){
      row_1[i] = new JLabel(String.valueOf((char)(i+65)));
      row_2[i] = new JLabel(String.valueOf((char)(i+65)));
      jGamePlayPane.add(row_1[i], new org.netbeans.lib.awtextra.AbsoluteConstraints(20, (120+i*50), -1, -1));
      jGamePlayPane.add(row_2[i], new org.netbeans.lib.awtextra.AbsoluteConstraints(555, (120+i*50), -1, -1));
    }
  }
  //save ai table
  private void AISave(){
    try(BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("AI.txt"), "UTF-8"))){
      for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
          writer.write(String.valueOf(bg.real[i][j]));
        }
        writer.write("\n");
      }
      writer.close();
    }catch (IOException ex){
      //handle me
      ex.printStackTrace();
    }
  }
  //load ai
  private void AILoad(){
     
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("AI.txt"), "utf-8"))) {
      String temp;
      int counter=0;
      while((temp=reader.readLine())!=null){
        for(int j=0;j<10;j++){
         bg. real[counter][j]=temp.charAt(j);
         if(bg.real[counter][j]=='X'){
            buttons_AI[counter][j].setBackground(Color.red);
            buttons_AI[counter][j].setText(String.valueOf(bg.real[counter][j]));
          }
          else if(bg.real[counter][j]=='O'){
            buttons_AI[counter][j].setBackground(Color.yellow);
            buttons_AI[counter][j].setText(String.valueOf(bg.real[counter][j]));
          }
        }
        counter++;
        System.out.println(temp);
        System.out.println(temp.length());
      }
      reader.close();
    } catch (IOException ex){
      ex.printStackTrace();
    }
    
    //set ai buttons enable
    enableAI(true);
    ppre=false;
  }
  //save player
  private void PlayerSave(){
    try(BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("Player.txt"), "UTF-8"))){
      for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
          writer.write(String.valueOf(bg.player[i][j]));
        }
        writer.write("\n");
      }
      writer.close();
    }catch (IOException ex){
      //handle me
      ex.printStackTrace();
    }
  }
  //load player
  private void PlayerLoad(){
      
    //skip place ship part
    Tip.setText("Ready to fire!");
    
    //update button text
    fireButton.setText("Fire");
    
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("Player.txt"), "utf-8"))) {
      String temp;
      int counter=0;
      while((temp=reader.readLine())!=null){
        for(int j=0;j<10;j++){
          bg.player[counter][j]=temp.charAt(j);
          if(bg.player[counter][j]=='X'){
            buttons_Player[counter][j].setBackground(Color.red);
            buttons_Player[counter][j].setText(String.valueOf(bg.player[counter][j]));
          }
          else if(bg.player[counter][j]=='O'){
            buttons_Player[counter][j].setBackground(Color.yellow);
            buttons_Player[counter][j].setText(String.valueOf(bg.player[counter][j]));
          }
          else if(bg.player[counter][j]!=' '){
            buttons_Player[counter][j].setBackground(Color.gray);
            buttons_Player[counter][j].setText(String.valueOf(bg.player[counter][j]));
          }
        }
        counter++;
        System.out.println(temp);
        System.out.println(temp.length());
      }
      reader.close();
    } catch (IOException ex){
      ex.printStackTrace();
    }
  }
  private void NameSave(){
    try(BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("Name.txt"), "UTF-8"))){
      writer.write(playerNameLabel.getText());
      writer.close();
    }catch (IOException ex){
      //handle me
      ex.printStackTrace();
    }
  }
  //load name to player name label
  private void NameLoad(){
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("Name.txt"), "utf-8"))) {
      String temp;
      temp=reader.readLine();
      playerNameLabel.setText(temp);
      System.out.println(temp);
      System.out.println(temp.length());
    reader.close();
    } catch (IOException ex){
      ex.printStackTrace();
    }
  }
  public void reset(){
    File[] file = new File[3];
    String[] FileName = {"Player.txt", "AI.txt", "Name.txt"};
    for(int i=0;i<3;i++){
      file[i] = new File(FileName[i]);
      file[i].delete();
    }
  }
  
  
  public void startAILoad(){
      
  }
   public void startPlayerLoad(){
      
  }
  public void startNameLoad(){
      
  }
   public void startUpdateTable(){
      
  }
  
}
